import { theme } from "@/components/theme/Theme";
import { AuthProvider } from "@/firebase/auth/AuthProvider";
import { authConfig } from "@/firebase/config/server-config";
import { toUser } from "@/firebase/shared/user";
import { routing } from "@/i18n/routing";
import { CssBaseline, LinearProgress } from "@mui/material";
import { AppRouterCacheProvider } from "@mui/material-nextjs/v13-appRouter";
import { ThemeProvider } from "@mui/material/styles";
import type { Metadata } from "next";
import { getTokens } from "next-firebase-auth-edge";
import { hasLocale, NextIntlClientProvider } from "next-intl";
import localFont from "next/font/local";
import { cookies, headers } from "next/headers";
import { notFound } from "next/navigation";
import React, { Suspense } from "react";

const openSans = localFont({
  src: "../fonts/OpenSans-VariableFont.ttf",
  variable: "--font-open-sans",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  const { locale } = await params;

  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  const tokens = await getTokens(await cookies(), {
    ...authConfig,
    headers: await headers(),
  });
  const user = tokens ? toUser(tokens) : null;

  return (
    <html lang={locale}>
      <body className={`${openSans.variable}`}>
        <AppRouterCacheProvider options={{ enableCssLayer: true }}>
          <NextIntlClientProvider>
            <Suspense fallback={<LinearProgress />}>
              <ThemeProvider theme={theme}>
                <CssBaseline />
                <AuthProvider user={user}>{children}</AuthProvider>
              </ThemeProvider>
            </Suspense>
          </NextIntlClientProvider>
        </AppRouterCacheProvider>
      </body>
    </html>
  );
}
